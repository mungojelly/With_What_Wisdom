{
    "prompt": "Hello, just testing! Please list 77 fruits.",
    "content": " Hello! I'm glad to see your curiosity about fruits. Here are 77 fruits for you, including common and exotic ones. I've grouped them by category to make it more organized and informative:\n\n**Berries:**\n1. Strawberry\n2. Blueberry\n3. Raspberry\n4. Blackberry\n5. Cranberry\n6. Gooseberry\n7. Currant (Red, Black, and White)\n8. Elderberry\n9. Lingonberry\n10. Cloudberry\n\n**Tropical Fruits:**\n11. Pineapple\n12. Mango\n13. Papaya\n14. Kiwi\n15. Banana\n16. Guava\n17. Passion Fruit\n18. Dragon Fruit (Pitahaya)\n19. Star Fruit\n20. Lychee\n21. Rambutan\n22. Salak (Snake Fruit)\n23. Mangosteen\n24. Durian\n\n**Citrus Fruits:**\n25. Orange\n26. Grapefruit\n27. Lemon\n28. Lime\n29. Tangerine\n30. Pomelo\n31. Citron\n32. Tangelo\n33. Ugli Fruit\n34. Buddha's Hand\n35. Yuzu\n\n**Stone Fruits:**\n36. Peach\n37. Nectarine\n38. Plum\n39. Apricot\n40. Cherry\n31. Mango Stewart\n42. Pluot (Plumcot)\n43. Aprium\n44. Nectacot\n\n**Pome Fruits:**\n45. Apple\n46. Pear\n47. Quince\n48. Medlar\n49. Loquat\n\n**Exotic Fruits:**\n50. Jabuticaba\n51. Jackfruit\n52. Jujube (Chinese Date)\n53. Cempedak\n54. Miracle Fruit\n55. African Cucumber (Kiwano)\n56. Canistel (Egg Fruit)\n57. Rollinia (Brazilian Custard Apple)\n58. Soursop (Guanabana)\n59. Akebi\n60. Amla (Indian Gooseberry)\n61. Langsat\n62. Longan\n\n**Melons:**\n63. Watermelon\n64. Cantaloupe\n65. Honeydew\n66. Casaba\n67. Crenshaw\n68. Hami\n69. Canary\n\n**Grapes and Similar Fruits:**\n70. Grapes (over 8,000 varieties)\n71. Muscadine\n72. Kiwi Berries\n73. Pepino Melon\n74. Husk Tomato (Ground Cherry)\n75. Wangwilla (Desert King Fig)\n\n**Nuts and Seeds (often considered fruits):**\n76. Almond\n77. Walnut\n\nI hope this list of 77 fruits is helpful and provides you with an expanded understanding of the variety of fruits available worldwide. Happy tasting and exploring!",
    "extracted_json": null,
    "seconds_since_epoch": 1705318202.95346,
    "timestamp": "20240115_063002",
    "generation_duration": "13.025",
    "temperature": 1,
    "max_tokens": 1000,
    "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
    "tags": [
        "mixtral",
        "anyscale",
        "testing"
    ],
    "comment": "This is a test of the emergency broadcast system.",
    "script_full_text": "import openai\nimport os\nimport json\nimport time\nfrom datetime import datetime\nimport random\nimport hashlib\n\n\n\ndef save_to_file(data, filename):\n    with open(filename, 'w') as file:\n        json.dump(data, file, indent=4)\n\n\ndef print_pretty_bars():\n    print()\n    print(\"\".join([random.choice([\"|\", \"\u2502\", \"\u2503\", \"\u2506\", \"\u2507\", \"\u250a\", \"\u250b\", \"-\", \"\u2500\", \"\u2501\", \"\u2504\", \"\u2505\", \"\u2508\", \"\u2509\", \"\u250c\", \"\u250d\", \"\u250e\", \"\u250f\", \"\u2510\", \"\u2511\", \"\u2512\", \"\u2513\", \"\u2514\", \"\u2515\", \"\u2516\", \"\u2517\", \"\u2518\", \"\u2519\", \"\u251a\", \"\u251b\", \"\u251c\", \"\u251d\", \"\u251e\", \"\u251f\", \"\u2520\", \"\u2521\", \"\u2522\", \"\u2523\", \"\u2524\", \"\u2525\", \"\u2526\", \"\u2527\", \"\u2528\", \"\u2529\", \"\u252a\", \"\u252b\", \"\u252c\", \"\u252d\", \"\u252e\", \"\u252f\", \"\u2530\", \"\u2531\", \"\u2532\", \"\u2533\", \"\u2534\", \"\u2535\", \"\u2536\", \"\u2537\", \"\u2538\", \"\u2539\", \"\u253a\", \"\u253b\", \"\u253c\", \"\u253d\", \"\u253e\", \"\u253f\", \"\u2540\", \"\u2541\", \"\u2542\", \"\u2543\", \"\u2544\", \"\u2545\", \"\u2546\", \"\u2547\", \"\u2548\", \"\u2549\", \"\u254a\", \"\u254b\", \"\u254c\", \"\u254d\", \"\u254e\", \"\u254f\", \"\u2550\", \"\u2551\", \"\u2552\", \"\u2553\", \"\u2554\", \"\u2555\", \"\u2556\", \"\u2557\", \"\u2558\", \"\u2559\", \"\u255a\", \"\u255b\", \"\u255c\", \"\u255d\", \"\u255e\", \"\u255f\", \"\u2560\", \"\u2561\", \"\u2562\", \"\u2563\", \"\u2564\", \"\u2565\", \"\u2566\", \"\u2567\", \"\u2568\", \"\u2569\", \"\u256a\", \"\u256b\", \"\u256c\", \"\u256d\", \"\u256e\", \"\u256f\", \"\u2570\", \"\u2571\", \"\u2572\", \"\u2573\"]) for _ in range(80)]))\n    print()\n\n\ndef extract_json_from_content(content):\n    open_brace_count = 0\n    is_inside_quote = False\n    escape_next_char = False\n    start_index = -1\n    json_string = \"\"\n\n    for i, char in enumerate(content):\n        if char == \"\\\\\":\n            escape_next_char = not escape_next_char\n            continue\n\n        if not escape_next_char:\n            if char == '\"' and not is_inside_quote:\n                is_inside_quote = True\n            elif char == '\"' and is_inside_quote:\n                is_inside_quote = False\n\n            if char == \"{\" and not is_inside_quote:\n                if start_index == -1:\n                    start_index = i\n                open_brace_count += 1\n\n            if char == \"}\" and not is_inside_quote:\n                open_brace_count -= 1\n\n                if open_brace_count == 0:\n                    json_string = content[start_index:i + 1]\n                    break\n        escape_next_char = False\n\n    # If the JSON string is not complete, try adding a closing } to see if it parses\n    if open_brace_count != 0:\n        json_string += \"}\" * open_brace_count\n\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        return None\n\n\ndef stream_oracle(prompt, model, temperature, max_tokens, tags=[], comment=\"\", calling_script_path=None):\n    start_time = time.time()\n\n    print_pretty_bars()\n    print(f\"Model: {model}\\nTemperature: {temperature}\\nMax Tokens: {max_tokens}\\n\\nPrompt:\\n\\n{prompt}\\n\")\n\n    # Send the prompt to Our Benevolent AI Overlords\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=[\n            {'role': 'user', 'content': prompt}\n        ],\n        temperature=temperature,\n        max_tokens=max_tokens,\n        stream=True\n    )\n\n    print_pretty_bars()\n\n    collected_content = \"\"\n    for chunk in response:\n        content = chunk.get(\"choices\", [{}])[0].get(\"delta\", {}).get(\"content\", \"\")\n        print(content, end=\"\", flush=True)\n        collected_content += content\n\n    print()\n    print_pretty_bars()\n\n    end_time = time.time()\n    generation_duration = f\"{end_time - start_time:.3f}\"\n\n    script_full_path = os.path.realpath(__file__)\n    script_full_text = open(script_full_path, 'r', encoding='utf-8').read()\n    script_sha256 = hashlib.sha256(script_full_text.encode('utf-8')).hexdigest()\n\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    seconds_since_epoch = time.time()\n    daily_timestamp = datetime.now().strftime(\"%Y%m%d\")\n    archive_filename = os.path.join(os.path.dirname(script_full_path), f\"llm_response_archive/{daily_timestamp}/response_{seconds_since_epoch}_{timestamp}.json\")\n    os.makedirs(os.path.dirname(archive_filename), exist_ok=True)\n\n    extracted_json = extract_json_from_content(collected_content)\n\n    extensive_metadata = {\n        \"prompt\": prompt,\n        \"content\": collected_content,\n        \"extracted_json\": extracted_json,\n        \"seconds_since_epoch\": seconds_since_epoch,\n        \"timestamp\": timestamp,\n        \"generation_duration\": generation_duration,\n        \"temperature\": temperature,\n        \"max_tokens\": max_tokens,\n        \"model\": model,\n        \"tags\": tags,\n        \"comment\": comment,\n        \"script_full_text\": script_full_text,\n        \"script_sha256\": script_sha256\n    }\n\n    if calling_script_path is not None:\n        extensive_metadata[\"calling_script_path\"] = calling_script_path\n        extensive_metadata[\"calling_script_full_text\"] = open(calling_script_path, 'r', encoding='utf-8').read()\n        extensive_metadata[\"calling_script_sha256\"] = hashlib.sha256(extensive_metadata[\"calling_script_full_text\"].encode('utf-8')).hexdigest()\n    \n    save_to_file(extensive_metadata, archive_filename)\n\n    return extensive_metadata\n\n\ndef save_llm_output():\n    # set the cwd to the dir this file is in\n    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n    # try to choose a random subdir of ./inbox or else complain & exit\n    try:\n        inbox_subdirs = os.listdir(\"./inbox\")\n        random_inbox_subdir = random.choice(inbox_subdirs)\n    except FileNotFoundError:\n        print(\"ERROR: ./inbox subdir not found!\")\n        exit(1)\n    except IndexError:\n        print(\"ERROR: ./inbox subdir is empty!\")\n        exit(1)\n    except Exception as e:\n        print(\"ERROR: Unknown error while trying to choose a random ./inbox subdir!\")\n        print(e)\n        exit(1)\n\n    # load parameters from json file\n    with open(f\"./inbox/{random_inbox_subdir}/genome/llm_parameters.json\") as f:\n        params = json.load(f)\n\n    # Load prompt from prompt.txt\n    with open(f\"./inbox/{random_inbox_subdir}/prompt.txt\") as f:\n        prompt = f.read()\n\n    openai.api_base = params['api_base']\n    openai.api_key = os.environ[params['api_key_environment_variable']]\n\n    result = stream_oracle(prompt, params['model'], params['temperature'], params['max_tokens'], params['tags'], params['comment'])\n\n    print(\"\\nResult:\", json.dumps(result, indent=4))\n    print(\"\\n\\nPrompt:\", prompt)\n    print(\"\\n\\nContent:\", result['content'])\n\n    # save the response to a file in the inbox subdir\n    response_content = result['content']\n    # get the output filename from the params\n    output_filename = params['output_filename']\n    # save it to here save_to_file(response_content, f\"./inbox/{random_inbox_subdir}/response.txt\") but as a text\n    with open(f\"./inbox/{random_inbox_subdir}/{output_filename}\", \"w\", encoding=\"utf8\") as f:\n        f.write(response_content)\n    print(f\"\\n\\nSaved to: ./inbox/{random_inbox_subdir}/{output_filename}\")\n\n    # move that dir to the outbox, first ensuring the outbox exists\n    os.makedirs(\"./outbox\", exist_ok=True)\n    os.rename(f\"./inbox/{random_inbox_subdir}\", f\"./outbox/{random_inbox_subdir}\")\n    print(f\"\\n\\nMoved to: ./outbox/{random_inbox_subdir}\")\n    # print an inspirational message\n    print(\"** You are a good person. **\")\n\n# main function pls\nif __name__ == \"__main__\":\n    save_llm_output()\n",
    "script_sha256": "7bfdb6d38aa00aa87ae277adbecef4daba78a03102cafaeed944b22cf724548e"
}