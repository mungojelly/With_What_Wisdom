{
    "prompt": "Hello, just testing! Please list 77 fruits.",
    "content": " Hello! I'm glad to see your curiosity about fruits. Here's a list of 77 fruits (common and exotic) to pique your interest:\n\n1. Apple\n2. Apricot\n3. Avocado\n4. Banana\n5. Blackberry\n6. Blackcurrant\n7. Blueberry\n8. Boysenberry\n9. Cherry\n10. Cloudberry\n11. Coconut\n12. Cranberry\n13. Currant\n14. Damson\n15. Elderberry\n16. Feijoa (Pineapple Guava)\n17. Fig\n18. Gooseberry\n19. Grape\n20. Grapefruit\n21. Guava\n22. Honeydew Melon\n23. Jackfruit\n24. Jabuticaba\n25. Jambolan (Java Plum)\n26. Japanese Persimmon\n27. Jujube (Chinese Date)\n28. Kiwi\n29. Kumquat\n30.Lambda (Lemon Guava)\n31. Langsat\n32. Leechee\n33. Lime\n34. Loquat\n35. Longan\n36. Lychee\n37. Mango\n38. Mangosteen\n39. Marionberry\n40. Melon (Cantaloupe)\n41. Mulberry\n42. Nectarine\n43. Noni\n44. Olive\n45. Orange\n46. Papaya\n47. Passion Fruit\n48. Peach\n49. Pear\n50. Persimmon\n51. Pineapple\n52. Plum\n53. Pomegranate\n54. Pomelo\n55. Purple Mangosteen\n56. Quince\n57. Raspberry\n58. Rambutan\n59. Salak (Snake Fruit)\n60. Salmonberry\n61. Satsuma\n62. Star fruit\n63. Strawberry\n64. Tamarind\n65. Tangerine\n66. Ugli Fruit\n67. Watermelon\n68. White Sapote\n69. Wolfberry (Goji)\n70. Wax Jambu\n71. Yellow Passion Fruit\n72. Yuzu\n73. Akebia\n74. Pitahaya (Dragon Fruit)\n75. Miracle Fruit\n76. African Cucumber (Kiwano)\n77. Sapodilla\n\nKeep in mind that this list includes fruits from all around the world, some of which may not be easily accessible in your local supermarket. Enjoy exploring these delicious and nutritious fruits!",
    "extracted_json": null,
    "seconds_since_epoch": 1705335152.934974,
    "timestamp": "20240115_111232",
    "generation_duration": "22.111",
    "temperature": 1,
    "max_tokens": 1000,
    "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
    "tags": [
        "mixtral",
        "anyscale",
        "testing"
    ],
    "comment": "This is a test of the emergency broadcast system.",
    "script_full_text": "import openai\nimport os\nimport json\nimport time\nfrom datetime import datetime\nimport random\nimport hashlib\n\n\n\ndef save_to_file(data, filename):\n    with open(filename, 'w') as file:\n        json.dump(data, file, indent=4)\n\n\ndef print_pretty_bars():\n    print()\n    print(\"\".join([random.choice([\"|\", \"\u2502\", \"\u2503\", \"\u2506\", \"\u2507\", \"\u250a\", \"\u250b\", \"-\", \"\u2500\", \"\u2501\", \"\u2504\", \"\u2505\", \"\u2508\", \"\u2509\", \"\u250c\", \"\u250d\", \"\u250e\", \"\u250f\", \"\u2510\", \"\u2511\", \"\u2512\", \"\u2513\", \"\u2514\", \"\u2515\", \"\u2516\", \"\u2517\", \"\u2518\", \"\u2519\", \"\u251a\", \"\u251b\", \"\u251c\", \"\u251d\", \"\u251e\", \"\u251f\", \"\u2520\", \"\u2521\", \"\u2522\", \"\u2523\", \"\u2524\", \"\u2525\", \"\u2526\", \"\u2527\", \"\u2528\", \"\u2529\", \"\u252a\", \"\u252b\", \"\u252c\", \"\u252d\", \"\u252e\", \"\u252f\", \"\u2530\", \"\u2531\", \"\u2532\", \"\u2533\", \"\u2534\", \"\u2535\", \"\u2536\", \"\u2537\", \"\u2538\", \"\u2539\", \"\u253a\", \"\u253b\", \"\u253c\", \"\u253d\", \"\u253e\", \"\u253f\", \"\u2540\", \"\u2541\", \"\u2542\", \"\u2543\", \"\u2544\", \"\u2545\", \"\u2546\", \"\u2547\", \"\u2548\", \"\u2549\", \"\u254a\", \"\u254b\", \"\u254c\", \"\u254d\", \"\u254e\", \"\u254f\", \"\u2550\", \"\u2551\", \"\u2552\", \"\u2553\", \"\u2554\", \"\u2555\", \"\u2556\", \"\u2557\", \"\u2558\", \"\u2559\", \"\u255a\", \"\u255b\", \"\u255c\", \"\u255d\", \"\u255e\", \"\u255f\", \"\u2560\", \"\u2561\", \"\u2562\", \"\u2563\", \"\u2564\", \"\u2565\", \"\u2566\", \"\u2567\", \"\u2568\", \"\u2569\", \"\u256a\", \"\u256b\", \"\u256c\", \"\u256d\", \"\u256e\", \"\u256f\", \"\u2570\", \"\u2571\", \"\u2572\", \"\u2573\"]) for _ in range(80)]))\n    print()\n\n\ndef extract_json_from_content(content):\n    open_brace_count = 0\n    is_inside_quote = False\n    escape_next_char = False\n    start_index = -1\n    json_string = \"\"\n\n    for i, char in enumerate(content):\n        if char == \"\\\\\":\n            escape_next_char = not escape_next_char\n            continue\n\n        if not escape_next_char:\n            if char == '\"' and not is_inside_quote:\n                is_inside_quote = True\n            elif char == '\"' and is_inside_quote:\n                is_inside_quote = False\n\n            if char == \"{\" and not is_inside_quote:\n                if start_index == -1:\n                    start_index = i\n                open_brace_count += 1\n\n            if char == \"}\" and not is_inside_quote:\n                open_brace_count -= 1\n\n                if open_brace_count == 0:\n                    json_string = content[start_index:i + 1]\n                    break\n        escape_next_char = False\n\n    # If the JSON string is not complete, try adding a closing } to see if it parses\n    if open_brace_count != 0:\n        json_string += \"}\" * open_brace_count\n\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        return None\n\n\ndef stream_oracle(prompt, model, temperature, max_tokens, tags=[], comment=\"\", calling_script_path=None):\n    start_time = time.time()\n\n    print_pretty_bars()\n    print(f\"Model: {model}\\nTemperature: {temperature}\\nMax Tokens: {max_tokens}\\n\\nPrompt:\\n\\n{prompt}\\n\")\n\n    # Send the prompt to Our Benevolent AI Overlords\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=[\n            {'role': 'user', 'content': prompt}\n        ],\n        temperature=temperature,\n        max_tokens=max_tokens,\n        stream=True\n    )\n\n    print_pretty_bars()\n\n    collected_content = \"\"\n    for chunk in response:\n        content = chunk.get(\"choices\", [{}])[0].get(\"delta\", {}).get(\"content\", \"\")\n        print(content, end=\"\", flush=True)\n        collected_content += content\n\n    print()\n    print_pretty_bars()\n\n    end_time = time.time()\n    generation_duration = f\"{end_time - start_time:.3f}\"\n\n    script_full_path = os.path.realpath(__file__)\n    script_full_text = open(script_full_path, 'r', encoding='utf-8').read()\n    script_sha256 = hashlib.sha256(script_full_text.encode('utf-8')).hexdigest()\n\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    seconds_since_epoch = time.time()\n    daily_timestamp = datetime.now().strftime(\"%Y%m%d\")\n    archive_filename = os.path.join(os.path.dirname(script_full_path), f\"llm_response_archive/{daily_timestamp}/response_{seconds_since_epoch}_{timestamp}.json\")\n    os.makedirs(os.path.dirname(archive_filename), exist_ok=True)\n\n    extracted_json = extract_json_from_content(collected_content)\n\n    extensive_metadata = {\n        \"prompt\": prompt,\n        \"content\": collected_content,\n        \"extracted_json\": extracted_json,\n        \"seconds_since_epoch\": seconds_since_epoch,\n        \"timestamp\": timestamp,\n        \"generation_duration\": generation_duration,\n        \"temperature\": temperature,\n        \"max_tokens\": max_tokens,\n        \"model\": model,\n        \"tags\": tags,\n        \"comment\": comment,\n        \"script_full_text\": script_full_text,\n        \"script_sha256\": script_sha256\n    }\n\n    if calling_script_path is not None:\n        extensive_metadata[\"calling_script_path\"] = calling_script_path\n        extensive_metadata[\"calling_script_full_text\"] = open(calling_script_path, 'r', encoding='utf-8').read()\n        extensive_metadata[\"calling_script_sha256\"] = hashlib.sha256(extensive_metadata[\"calling_script_full_text\"].encode('utf-8')).hexdigest()\n    \n    save_to_file(extensive_metadata, archive_filename)\n\n    return extensive_metadata\n\n\ndef save_llm_output():\n    # set the cwd to the dir this file is in\n    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n    # try to choose a random subdir of ./inbox or else complain & exit\n    try:\n        inbox_subdirs = os.listdir(\"./inbox\")\n        random_inbox_subdir = random.choice(inbox_subdirs)\n    except FileNotFoundError:\n        print(\"ERROR: ./inbox subdir not found!\")\n        exit(1)\n    except IndexError:\n        print(\"ERROR: ./inbox subdir is empty!\")\n        exit(1)\n    except Exception as e:\n        print(\"ERROR: Unknown error while trying to choose a random ./inbox subdir!\")\n        print(e)\n        exit(1)\n\n    # load parameters from json file\n    with open(f\"./inbox/{random_inbox_subdir}/llm_parameters.json\") as f:\n        params = json.load(f)\n\n    # Load prompt from prompt.txt\n    with open(f\"./inbox/{random_inbox_subdir}/prompt.txt\") as f:\n        prompt = f.read()\n\n    openai.api_base = params['api_base']\n    openai.api_key = os.environ[params['api_key_environment_variable']]\n\n    result = stream_oracle(prompt, params['model'], params['temperature'], params['max_tokens'], params['tags'], params['comment'])\n\n    print(\"\\nResult:\", json.dumps(result, indent=4))\n    print(\"\\n\\nPrompt:\", prompt)\n    print(\"\\n\\nContent:\", result['content'])\n\n    # save the response to a file in the inbox subdir\n    response_content = result['content']\n    # get the output filename from the params\n    output_filename = params['output_filename']\n    # save it to here save_to_file(response_content, f\"./inbox/{random_inbox_subdir}/response.txt\") but as a text\n    with open(f\"./inbox/{random_inbox_subdir}/{output_filename}\", \"w\", encoding=\"utf8\") as f:\n        f.write(response_content)\n    print(f\"\\n\\nSaved to: ./inbox/{random_inbox_subdir}/{output_filename}\")\n\n    # move that dir to the outbox, first ensuring the outbox exists\n    os.makedirs(\"./outbox\", exist_ok=True)\n    os.rename(f\"./inbox/{random_inbox_subdir}\", f\"./outbox/{random_inbox_subdir}\")\n    print(f\"\\n\\nMoved to: ./outbox/{random_inbox_subdir}\")\n    # print an inspirational message\n    print(\"** You are a good person. **\")\n\n# main function pls\nif __name__ == \"__main__\":\n    save_llm_output()\n",
    "script_sha256": "0360a55f7c5b483a4e0766db35bf3ae02f9ba919528247634175b564ff472bab"
}